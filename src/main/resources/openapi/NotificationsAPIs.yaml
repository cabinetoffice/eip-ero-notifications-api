openapi: 3.0.0
info:
  title: Notifications APIs
  version: '1.8.0'
  description: Notifications APIs
  contact:
    name: Krister Bone
    email: krister.bone@valtech.com
#
# --------------------------------------------------------------------------------
#
paths:
  #
  # --------------------------------------------------------------------------------
  # RESTful style endpoints start here
  # --------------------------------------------------------------------------------
  #

  #
  # Get a summary of all communications sent for a specified Voter Card Application
  # --------------------------------------------------------------------------------
  '/eros/{eroId}/communications/applications/{applicationId}':
    parameters:
      - name: eroId
        description: The ID of the Electoral Registration Office responsible for the Application.
        schema:
          type: string
        in: path
        required: true
      - name: applicationId
        description: The identifier of the Voter Card Application to retrieve the communications history.
        schema:
          type: string
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Voter Card Application Communications History
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Returns the communication history for a Voter Card Application
      description: Returns the communication history for a Voter Card Application, sorted by the communication sent date in descending order (most recent first).
      tags:
        - Voter Card Application Communications History
      responses:
        '200':
          $ref: '#/components/responses/CommunicationsHistory'
      operationId: get-communication-history-by-application-id
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/eros/{eroId}/communications/applications/{applicationId}'
        requestParameters:
          integration.request.path.eroId: method.request.path.eroId
          integration.request.path.applicationId: method.request.path.applicationId
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: GET

  #
  # --------------------------------------------------------------------------------
  # RPC style endpoints start here
  # --------------------------------------------------------------------------------
  #

  #
  # Generate Photo Resubmission Template Preview
  # --------------------------------------------------------------------------------

  '/templates/photo-resubmission/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Photo Resubmission Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text and html preview for a photo resubmission template type and personalisation data
      description: Generates a text and html preview for a photo resubmission template type and personalisation data
      operationId: generate-photo-resubmission-template-preview
      tags:
        - Generate Photo Resubmission Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GeneratePhotoResubmissionTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          description: Error response describing fields in the request payload that are in error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/photo-resubmission/preview'
        requestParameters:
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate ID Document Resubmission Template Preview
  # --------------------------------------------------------------------------------

  '/templates/id-document-resubmission/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate ID Document Resubmission Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text and html preview for an identity document resubmission template type and personalisation data
      description: Generates a text and html preview for an identity document resubmission template type and personalisation data
      operationId: generate-id-document-resubmission-template-preview
      tags:
        - Generate ID Document Resubmission Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateIdDocumentResubmissionTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          description: Error response describing fields in the request payload that are in error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/id-document-resubmission/preview'
        requestParameters:
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Application Rejected Template Preview
  # --------------------------------------------------------------------------------

  '/templates/application-rejected/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Application Rejected Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for an application rejected template type and personalisation data
      description: Generates a text preview for an application rejected template type and personalisation data
      operationId: generate-application-rejected-template-preview
      tags:
        - Generate Application Rejected Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateApplicationRejectedTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          description: Error response describing fields in the request payload that are in error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/application-rejected/preview'
        requestParameters:
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

  #
  # Generate Application Approval Template Preview
  # --------------------------------------------------------------------------------

  '/templates/application-approved/preview':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Generate Application Approved Template Preview
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Generates a text preview for an application approved template type and personalisation data
      description: Generates a text preview for an application approved template type and personalisation data
      operationId: generate-application-approved-template-preview
      tags:
        - Generate Application Approved Template Preview
      requestBody:
        $ref: '#/components/requestBodies/GenerateApplicationApprovedTemplatePreview'
      responses:
        '201':
          $ref: '#/components/responses/GenerateTemplatePreview'
        '400':
          description: Error response describing fields in the request payload that are in error
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - eroUserCognitoUserPoolAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: '${base_uri}/templates/application-approved/preview'
        requestParameters:
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: '${vpc_connection_id}'
        httpMethod: POST

components:
  #
  # Schema and Enum Definitions
  # --------------------------------------------------------------------------------
  schemas:
    ErrorResponse:
      title: ErrorResponse
      description: Response describing errors in a web request
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2022-09-28T18:01:42.105Z'
        status:
          type: integer
          example: 400
        error:
          type: string
          example: 'Bad Request'
        message:
          type: string
          example: 'Validation failed for object=''GenerateTemplatePreviewRequest''. Error count: 1'
        validationErrors:
          type: array
          items:
            type: string
          example:
            - 'Error on field ''channel'': rejected value [email]'
      required:
        - timestamp
        - status
        - error
        - message
    TemplateType:
      title: TemplateType
      description: An enum containing types of notification templates
      type: string
      enum:
        - application-received
        - application-approved
        - application-rejected
        - photo-resubmission
        - id-document-resubmission
        - postal-application-received
    Language:
      title: Language
      description: The language to view the template
      type: string
      enum:
        - cy
        - en
      default: en
    NotificationChannel:
      title: NotificationChannel
      description: The channel to notify an applicant
      type: string
      enum:
        - email
        - letter
    SourceType:
      title: SourceType
      description: The source type of the application
      type: string
      enum:
        - voter-card
        - postal
    GenerateIdDocumentResubmissionTemplatePreviewRequest:
      title: GenerateIdDocumentResubmissionTemplatePreviewRequest
      description: An object containing request attributes required for generating the identity document resubmission template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/NotificationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/IdDocumentPersonalisation'
      required:
        - channel
        - personalisation
    GeneratePhotoResubmissionTemplatePreviewRequest:
      title: GeneratePhotoResubmissionTemplatePreviewRequest
      description: An object containing request attributes required for generating the photo resubmission template preview
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/NotificationChannel'
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/PhotoPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - channel
        - personalisation
    GenerateTemplatePreviewRequest:
      title: GenerateTemplatePreviewRequest
      description: An object containing template type and map of personalisation data for the template
      type: object
      properties:
        personalisation:
          type: object
          additionalProperties:
            type: string
          description: Map of personalisation data
          example:
            name: Fred
            surname: Blogs
      required:
        - personalisation
    GenerateTemplatePreviewResponse:
      title: GenerateTemplatePreviewResponse
      type: object
      description: Response containing the result of template preview in text format and if supported also in html format
      properties:
        text:
          type: string
          description: Text preview of the template with personalisation data
          example: Hi Fred Blogs,
        subject:
          type: string
          description: Preview of the subject with personalisation data, if the template supports subject field
          example: Fred Blogs photo resubmission
        html:
          type: string
          description: Html preview of the template with personalisation data, if the template supports html format
          example: <p>Hi Fred Blogs,</p>
      required:
        - text
    GenerateApplicationRejectedTemplatePreviewRequest:
      title: GenerateApplicationRejectedTemplatePreviewRequest
      description: An object containing request attributes required for generating the application rejected template preview
      type: object
      properties:
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/ApplicationRejectedPersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - personalisation
    GenerateApplicationApprovedTemplatePreviewRequest:
      title: GenerateApplicationApprovedTemplatePreviewRequest
      description: An object containing request attributes required for generating the application approved template preview
      type: object
      properties:
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/BasePersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - language
        - personalisation
    GenerateApplicationReceivedTemplatePreviewRequest:
      title: GenerateApplicationReceivedTemplatePreviewRequest
      description: An object containing request attributes required for generating the application received template preview
      type: object
      properties:
        language:
          $ref: '#/components/schemas/Language'
        personalisation:
          $ref: '#/components/schemas/BasePersonalisation'
        sourceType:
          $ref: '#/components/schemas/SourceType'
      required:
        - language
        - personalisation
        - sourceType
    IdDocumentPersonalisation:
      title: IdDocumentPersonalisation
      type: object
      description: Personalisation details for an identity document resubmission template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        idDocumentRequestFreeText:
          type: string
          description: Free text regarding identity document request
          example: Please provide a valid identity document
      required:
        - idDocumentRequestFreeText
    PhotoPersonalisation:
      title: PhotoPersonalisation
      type: object
      description: Personalisation details for photo resubmission template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        photoRequestFreeText:
          type: string
          description: Free text regarding photo request
          example: Please provide a clear image
        uploadPhotoLink:
          type: string
          description: The URL link to upload a new image
          example: 'http://localhost:8080/eros/city-council/applications/507f1f77bcf86cd799439011/photos/398c1be2-7950-48a2-aca8-14cb9276a673'
      required:
        - photoRequestFreeText
        - uploadPhotoLink
    BasePersonalisation:
      title: BasePersonalisation
      type: object
      description: Base/Common personalisation details required for a template
      properties:
        applicationReference:
          type: string
          description: The reference number of the Voter Card Application
          example: A3JSZC4CRH
        firstName:
          type: string
          pattern: '.*[a-zA-Z]+.*'
          minLength: 1
          maxLength: 255
          description: The applicant's first name
          example: Fred
        eroContactDetails:
          $ref: '#/components/schemas/ContactDetails'
      required:
        - applicationReference
        - firstName
        - eroContactDetails
    ApplicationRejectedPersonalisation:
      title: ApplicationRejectedPersonalisation
      type: object
      description: Personalisation details for an application rejected template
      allOf:
        - $ref: '#/components/schemas/BasePersonalisation'
      properties:
        rejectionReasonList:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRejectionReason'
          example: 'Application is incomplete'
        rejectionReasonMessage:
          type: string
          example: 'Applicant address information is incomplete'
      required:
        - rejectionReasonList
    ContactDetails:
      title: ContactDetails
      type: object
      description: Contact details for an ERO
      properties:
        localAuthorityName:
          description: Name of the Local Authority
          type: string
          example: City of Sunderland
        website:
          description: ERO website address
          type: string
          example: "https://ero-address.com"
        phone:
          description: ERO phone number
          type: string
          example: 01234 567890
        email:
          description: Email address for an ERO
          type: string
          example: fred.blogs@some-domain.co.uk
        address:
          $ref: '#/components/schemas/Address'
      required:
        - localAuthorityName
        - website
        - phone
        - email
        - address
    Address:
      title: Address
      description: Address format used throughout gov.uk voter services for an ERO.
      type: object
      x-examples:
        Minimum data:
          street: Street 1
          postcode: PC1 2FB
        Normal Address:
          street: East Lodge
          property: Balruddery
          locality: Invergowrie
          town: Dundee
          area: Angus
          postcode: DD25LF
      properties:
        street:
          type: string
          minLength: 1
          maxLength: 255
          example: Charles Lane
        property:
          type: string
          maxLength: 255
        locality:
          type: string
          maxLength: 255
        town:
          type: string
          maxLength: 255
          example: London
        area:
          type: string
          maxLength: 255
        postcode:
          type: string
          minLength: 1
          maxLength: 10
          example: PE3 6SB
      required:
        - street
        - postcode
    CommunicationsHistoryResponse:
      title: CommunicationsHistoryResponse
      description: Response containing the communications history for an application
      type: object
      properties:
        communications:
          type: array
          items:
            $ref: '#/components/schemas/CommunicationsSummary'
      required:
        - communications
    CommunicationsSummary:
      title: CommunicationsSummary
      description: The summary data for an individual communication sent as part of an application.
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the communication
          example: '7dcf22b7-cf2f-47e6-b548-0afab1a359fd'
        channel:
          $ref: '#/components/schemas/NotificationChannel'
        templateType:
          $ref: '#/components/schemas/TemplateType'
        requestor:
          type: string
          description: The User ID of the user that originally requested the communication as part of processing the application.
          example: fred@some-ero.gov.uk
        timestamp:
          type: string
          format: date-time
          example: '2022-09-28T18:01:42.105Z'
          description: The timestamp that the communication was sent.
      required:
        - id
        - channel
        - type
        - requestor
        - timestamp
    ApplicationRejectionReason:
      title: ApplicationRejectionReason
      description: Enum of reasons why an application was rejected
      type: string
      enum:
        - not-registered-to-vote
        - incomplete-application
        - photo-is-not-acceptable
        - no-response-from-applicant
        - inaccurate-information
        - fraudulent-application
        - other

  #
  # Response Body Definitions
  # --------------------------------------------------------------------------------
  responses:
    GenerateTemplatePreview:
      description: Response containing the result of template previews in text and html format
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateTemplatePreviewResponse'
    CommunicationsHistory:
      description: Response containing the communications history for an application
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommunicationsHistoryResponse'

  #
  # Request Body Definitions
  # --------------------------------------------------------------------------------
  requestBodies:
    GeneratePhotoResubmissionTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneratePhotoResubmissionTemplatePreviewRequest'
    GenerateIdDocumentResubmissionTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateIdDocumentResubmissionTemplatePreviewRequest'
    GenerateApplicationRejectedTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateApplicationRejectedTemplatePreviewRequest'
    GenerateApplicationReceivedTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateApplicationReceivedTemplatePreviewRequest'
    GenerateApplicationApprovedTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateApplicationApprovedTemplatePreviewRequest'
    GenerateTemplatePreview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateTemplatePreviewRequest'

  securitySchemes:
    eroUserCognitoUserPoolAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - '${cognito_ero_user_pool_arn}'
        type: cognito_user_pools